diff --git a/drivers/usb/typec/tcpm/tcpci.c b/drivers/usb/typec/tcpm/tcpci.c
index 7ba1c59d14a2..b6ca7ed0794a 100644
--- a/drivers/usb/typec/tcpm/tcpci.c
+++ b/drivers/usb/typec/tcpm/tcpci.c
@@ -1,3 +1,5 @@
+#define pr_fmt(fmt) "%s:%s: " fmt, KBUILD_MODNAME, __func__
+
 // SPDX-License-Identifier: GPL-2.0+
 /*
  * Copyright 2015-2017 Google, Inc
@@ -36,6 +38,7 @@ struct tcpci {
 	struct regmap *regmap;
 
 	bool controls_vbus;
+	bool drive_vbus;
 
 	struct tcpc_dev tcpc;
 	struct tcpci_data *data;
@@ -52,6 +55,20 @@ struct tcpm_port *tcpci_get_tcpm_port(struct tcpci *tcpci)
 }
 EXPORT_SYMBOL_GPL(tcpci_get_tcpm_port);
 
+static int Iregmap_write(struct regmap *map, unsigned int reg, unsigned int val)
+{
+  pr_warn("write 0x%02X = 0x%02X", reg, val);
+  //msleep(5000);
+  return regmap_write(map, reg, val);
+}
+
+static int Iregmap_read(struct regmap *map, unsigned int reg, unsigned int *val)
+{
+  int ret = regmap_read(map, reg, val);
+  pr_warn("read 0x%02X = 0x%02X", reg, *val);
+  return ret;
+}
+
 static inline struct tcpci *tcpc_to_tcpci(struct tcpc_dev *tcpc)
 {
 	return container_of(tcpc, struct tcpci, tcpc);
@@ -59,12 +76,16 @@ static inline struct tcpci *tcpc_to_tcpci(struct tcpc_dev *tcpc)
 
 static int tcpci_read16(struct tcpci *tcpci, unsigned int reg, u16 *val)
 {
-	return regmap_raw_read(tcpci->regmap, reg, val, sizeof(u16));
+  int ret = regmap_raw_read(tcpci->regmap, reg, val, sizeof(u16));
+  pr_warn("read16 %02X = %02X", reg, *val);
+  return ret;
 }
 
 static int tcpci_write16(struct tcpci *tcpci, unsigned int reg, u16 val)
 {
-	return regmap_raw_write(tcpci->regmap, reg, &val, sizeof(u16));
+  pr_warn("write16 %02X = %02X", reg, val);
+  //msleep(5000);
+  return regmap_raw_write(tcpci->regmap, reg, &val, sizeof(u16));
 }
 
 static int tcpci_set_cc(struct tcpc_dev *tcpc, enum typec_cc_status cc)
@@ -75,13 +96,16 @@ static int tcpci_set_cc(struct tcpc_dev *tcpc, enum typec_cc_status cc)
 	unsigned int reg;
 	int ret;
 
-	ret = regmap_read(tcpci->regmap, TCPC_POWER_STATUS, &reg);
+pr_warn("entry - status %d - ignoring this", cc);
+return 0;
+
+	ret = Iregmap_read(tcpci->regmap, TCPC_POWER_STATUS, &reg);
 	if (ret < 0)
 		return ret;
 
 	vconn_pres = !!(reg & TCPC_POWER_STATUS_VCONN_PRES);
 	if (vconn_pres) {
-		ret = regmap_read(tcpci->regmap, TCPC_TCPC_CTRL, &reg);
+		ret = Iregmap_read(tcpci->regmap, TCPC_TCPC_CTRL, &reg);
 		if (ret < 0)
 			return ret;
 
@@ -133,7 +157,7 @@ static int tcpci_set_cc(struct tcpc_dev *tcpc, enum typec_cc_status cc)
 		}
 	}
 
-	ret = regmap_write(tcpci->regmap, TCPC_ROLE_CTRL, reg);
+	ret = Iregmap_write(tcpci->regmap, TCPC_ROLE_CTRL, reg);
 	if (ret < 0)
 		return ret;
 
@@ -147,7 +171,7 @@ static int tcpci_apply_rc(struct tcpc_dev *tcpc, enum typec_cc_status cc,
 	unsigned int reg;
 	int ret;
 
-	ret = regmap_read(tcpci->regmap, TCPC_ROLE_CTRL, &reg);
+	ret = Iregmap_read(tcpci->regmap, TCPC_ROLE_CTRL, &reg);
 	if (ret < 0)
 		return ret;
 
@@ -204,10 +228,11 @@ static int tcpci_start_toggling(struct tcpc_dev *tcpc,
 	else
 		reg |= (TCPC_ROLE_CTRL_CC_RP << TCPC_ROLE_CTRL_CC1_SHIFT) |
 			   (TCPC_ROLE_CTRL_CC_RP << TCPC_ROLE_CTRL_CC2_SHIFT);
-	ret = regmap_write(tcpci->regmap, TCPC_ROLE_CTRL, reg);
+	ret = Iregmap_write(tcpci->regmap, TCPC_ROLE_CTRL, reg);
 	if (ret < 0)
 		return ret;
-	return regmap_write(tcpci->regmap, TCPC_COMMAND,
+
+	return Iregmap_write(tcpci->regmap, TCPC_COMMAND,
 			    TCPC_CMD_LOOK4CONNECTION);
 }
 
@@ -218,11 +243,11 @@ static int tcpci_get_cc(struct tcpc_dev *tcpc,
 	unsigned int reg, role_control;
 	int ret;
 
-	ret = regmap_read(tcpci->regmap, TCPC_ROLE_CTRL, &role_control);
+	ret = Iregmap_read(tcpci->regmap, TCPC_ROLE_CTRL, &role_control);
 	if (ret < 0)
 		return ret;
 
-	ret = regmap_read(tcpci->regmap, TCPC_CC_STATUS, &reg);
+	ret = Iregmap_read(tcpci->regmap, TCPC_CC_STATUS, &reg);
 	if (ret < 0)
 		return ret;
 
@@ -247,7 +272,7 @@ static int tcpci_set_polarity(struct tcpc_dev *tcpc,
 	enum typec_cc_status cc1, cc2;
 
 	/* Obtain Rp setting from role control */
-	ret = regmap_read(tcpci->regmap, TCPC_ROLE_CTRL, &reg);
+	ret = Iregmap_read(tcpci->regmap, TCPC_ROLE_CTRL, &reg);
 	if (ret < 0)
 		return ret;
 
@@ -289,11 +314,11 @@ static int tcpci_set_polarity(struct tcpc_dev *tcpc,
 		reg |= TCPC_ROLE_CTRL_CC_OPEN << TCPC_ROLE_CTRL_CC1_SHIFT;
 	else
 		reg |= TCPC_ROLE_CTRL_CC_OPEN << TCPC_ROLE_CTRL_CC2_SHIFT;
-	ret = regmap_write(tcpci->regmap, TCPC_ROLE_CTRL, reg);
+	ret = Iregmap_write(tcpci->regmap, TCPC_ROLE_CTRL, reg);
 	if (ret < 0)
 		return ret;
 
-	return regmap_write(tcpci->regmap, TCPC_TCPC_CTRL,
+	return Iregmap_write(tcpci->regmap, TCPC_TCPC_CTRL,
 			   (polarity == TYPEC_POLARITY_CC2) ?
 			   TCPC_TCPC_CTRL_ORIENTATION : 0);
 }
@@ -311,6 +336,9 @@ static int tcpci_set_vconn(struct tcpc_dev *tcpc, bool enable)
 	struct tcpci *tcpci = tcpc_to_tcpci(tcpc);
 	int ret;
 
+pr_warn("entry - DON'T ALLOW CHANGING VCONN");
+return 0;
+
 	/* Handle vendor set vconn */
 	if (tcpci->data->set_vconn) {
 		ret = tcpci->data->set_vconn(tcpci, tcpci->data, enable);
@@ -330,6 +358,7 @@ static int tcpci_enable_auto_vbus_discharge(struct tcpc_dev *dev, bool enable)
 
 	ret = regmap_update_bits(tcpci->regmap, TCPC_POWER_CTRL, TCPC_POWER_CTRL_AUTO_DISCHARGE,
 				 enable ? TCPC_POWER_CTRL_AUTO_DISCHARGE : 0);
+
 	return ret;
 }
 
@@ -340,6 +369,9 @@ static int tcpci_set_auto_vbus_discharge_threshold(struct tcpc_dev *dev, enum ty
 	unsigned int pwr_ctrl, threshold = 0;
 	int ret;
 
+pr_warn("entry - DON'T ALLOW AUTO VBUS DISCHARGE THREHOLD");
+return 0;
+
 	/*
 	 * Indicates that vbus is going to go away due PR_SWAP, hard reset etc.
 	 * Do not discharge vbus here.
@@ -347,7 +379,7 @@ static int tcpci_set_auto_vbus_discharge_threshold(struct tcpc_dev *dev, enum ty
 	if (requested_vbus_voltage_mv == 0)
 		goto write_thresh;
 
-	ret = regmap_read(tcpci->regmap, TCPC_POWER_CTRL, &pwr_ctrl);
+	ret = Iregmap_read(tcpci->regmap, TCPC_POWER_CTRL, &pwr_ctrl);
 	if (ret < 0)
 		return ret;
 
@@ -421,7 +453,7 @@ static int tcpci_set_roles(struct tcpc_dev *tcpc, bool attached,
 		reg |= TCPC_MSG_HDR_INFO_PWR_ROLE;
 	if (data == TYPEC_HOST)
 		reg |= TCPC_MSG_HDR_INFO_DATA_ROLE;
-	ret = regmap_write(tcpci->regmap, TCPC_MSG_HDR_INFO, reg);
+	ret = Iregmap_write(tcpci->regmap, TCPC_MSG_HDR_INFO, reg);
 	if (ret < 0)
 		return ret;
 
@@ -436,7 +468,7 @@ static int tcpci_set_pd_rx(struct tcpc_dev *tcpc, bool enable)
 
 	if (enable)
 		reg = TCPC_RX_DETECT_SOP | TCPC_RX_DETECT_HARD_RESET;
-	ret = regmap_write(tcpci->regmap, TCPC_RX_DETECT, reg);
+	ret = Iregmap_write(tcpci->regmap, TCPC_RX_DETECT, reg);
 	if (ret < 0)
 		return ret;
 
@@ -449,7 +481,7 @@ static int tcpci_get_vbus(struct tcpc_dev *tcpc)
 	unsigned int reg;
 	int ret;
 
-	ret = regmap_read(tcpci->regmap, TCPC_POWER_STATUS, &reg);
+	ret = Iregmap_read(tcpci->regmap, TCPC_POWER_STATUS, &reg);
 	if (ret < 0)
 		return ret;
 
@@ -462,7 +494,7 @@ static bool tcpci_is_vbus_vsafe0v(struct tcpc_dev *tcpc)
 	unsigned int reg;
 	int ret;
 
-	ret = regmap_read(tcpci->regmap, TCPC_EXTENDED_STATUS, &reg);
+	ret = Iregmap_read(tcpci->regmap, TCPC_EXTENDED_STATUS, &reg);
 	if (ret < 0)
 		return false;
 
@@ -475,20 +507,23 @@ static int tcpci_vbus_force_discharge(struct tcpc_dev *tcpc, bool enable)
 	unsigned int reg;
 	int ret;
 
+pr_warn("entry - DON'T ALLOW FORCE DISCHARGE");
+return 0;
+
 	if (enable)
-		regmap_write(tcpci->regmap,
+		Iregmap_write(tcpci->regmap,
 			TCPC_VBUS_VOLTAGE_ALARM_LO_CFG, 0x1c);
 	else
-		regmap_write(tcpci->regmap,
+		Iregmap_write(tcpci->regmap,
 			TCPC_VBUS_VOLTAGE_ALARM_LO_CFG, 0);
 
-	regmap_read(tcpci->regmap, TCPC_POWER_CTRL, &reg);
+	Iregmap_read(tcpci->regmap, TCPC_POWER_CTRL, &reg);
 
 	if (enable)
 		reg |= TCPC_POWER_CTRL_FORCEDISCH;
 	else
 		reg &= ~TCPC_POWER_CTRL_FORCEDISCH;
-	ret = regmap_write(tcpci->regmap, TCPC_POWER_CTRL, reg);
+	ret = Iregmap_write(tcpci->regmap, TCPC_POWER_CTRL, reg);
 	if (ret < 0)
 		return ret;
 
@@ -500,6 +535,8 @@ static int tcpci_set_vbus(struct tcpc_dev *tcpc, bool source, bool sink)
 	struct tcpci *tcpci = tcpc_to_tcpci(tcpc);
 	int ret;
 
+pr_warn("tcpci_set_vbus: source %d, sink %d", source, sink);
+
 	if (tcpci->data->set_vbus) {
 		ret = tcpci->data->set_vbus(tcpci, tcpci->data, source, sink);
 		/* Bypass when ret > 0 */
@@ -509,15 +546,15 @@ static int tcpci_set_vbus(struct tcpc_dev *tcpc, bool source, bool sink)
 
 	/* Disable both source and sink first before enabling anything */
 
-	if (!source) {
-		ret = regmap_write(tcpci->regmap, TCPC_COMMAND,
+	if (!source && tcpci->drive_vbus) {
+		ret = Iregmap_write(tcpci->regmap, TCPC_COMMAND,
 				   TCPC_CMD_DISABLE_SRC_VBUS);
 		if (ret < 0)
 			return ret;
 	}
 
 	if (!sink) {
-		ret = regmap_write(tcpci->regmap, TCPC_COMMAND,
+		ret = Iregmap_write(tcpci->regmap, TCPC_COMMAND,
 				   TCPC_CMD_DISABLE_SINK_VBUS);
 		if (ret < 0)
 			return ret;
@@ -527,14 +564,16 @@ static int tcpci_set_vbus(struct tcpc_dev *tcpc, bool source, bool sink)
 		tcpci_vbus_force_discharge(tcpc, true);
 
 	if (source) {
-		ret = regmap_write(tcpci->regmap, TCPC_COMMAND,
+		tcpci->drive_vbus = true;
+
+		ret = Iregmap_write(tcpci->regmap, TCPC_COMMAND,
 				   TCPC_CMD_SRC_VBUS_DEFAULT);
 		if (ret < 0)
 			return ret;
 	}
 
 	if (sink) {
-		ret = regmap_write(tcpci->regmap, TCPC_COMMAND,
+		ret = Iregmap_write(tcpci->regmap, TCPC_COMMAND,
 				   TCPC_CMD_SINK_VBUS);
 		if (ret < 0)
 			return ret;
@@ -577,7 +616,7 @@ static int tcpci_pd_transmit(struct tcpc_dev *tcpc, enum tcpm_transmit_type type
 		if (ret < 0)
 			return ret;
 	} else {
-		ret = regmap_write(tcpci->regmap, TCPC_TX_BYTE_CNT, cnt + 2);
+		ret = Iregmap_write(tcpci->regmap, TCPC_TX_BYTE_CNT, cnt + 2);
 		if (ret < 0)
 			return ret;
 
@@ -595,7 +634,7 @@ static int tcpci_pd_transmit(struct tcpc_dev *tcpc, enum tcpm_transmit_type type
 	/* nRetryCount is 3 in PD2.0 spec where 2 in PD3.0 spec */
 	reg = ((negotiated_rev > PD_REV20 ? PD_RETRY_COUNT_3_0_OR_HIGHER : PD_RETRY_COUNT_DEFAULT)
 	       << TCPC_TRANSMIT_RETRY_SHIFT) | (type << TCPC_TRANSMIT_TYPE_SHIFT);
-	ret = regmap_write(tcpci->regmap, TCPC_TRANSMIT, reg);
+	ret = Iregmap_write(tcpci->regmap, TCPC_TRANSMIT, reg);
 	if (ret < 0)
 		return ret;
 
@@ -610,7 +649,7 @@ static int tcpci_init(struct tcpc_dev *tcpc)
 	int ret;
 
 	while (time_before_eq(jiffies, timeout)) {
-		ret = regmap_read(tcpci->regmap, TCPC_POWER_STATUS, &reg);
+		ret = Iregmap_read(tcpci->regmap, TCPC_POWER_STATUS, &reg);
 		if (ret < 0)
 			return ret;
 		if (!(reg & TCPC_POWER_STATUS_UNINIT))
@@ -637,18 +676,18 @@ static int tcpci_init(struct tcpc_dev *tcpc)
 		return ret;
 
 	/* Clear fault condition */
-	regmap_write(tcpci->regmap, TCPC_FAULT_STATUS, 0x80);
+	Iregmap_write(tcpci->regmap, TCPC_FAULT_STATUS, 0x80);
 
 	if (tcpci->controls_vbus)
 		reg = TCPC_POWER_STATUS_VBUS_PRES;
 	else
 		reg = 0;
-	ret = regmap_write(tcpci->regmap, TCPC_POWER_STATUS_MASK, reg);
+	ret = Iregmap_write(tcpci->regmap, TCPC_POWER_STATUS_MASK, reg);
 	if (ret < 0)
 		return ret;
 
 	/* Enable Vbus detection */
-	ret = regmap_write(tcpci->regmap, TCPC_COMMAND,
+	ret = Iregmap_write(tcpci->regmap, TCPC_COMMAND,
 			   TCPC_CMD_ENABLE_VBUS_DETECT);
 	if (ret < 0)
 		return ret;
@@ -662,11 +701,12 @@ static int tcpci_init(struct tcpc_dev *tcpc)
 	/* Enable VSAFE0V status interrupt when detecting VSAFE0V is supported */
 	if (tcpci->data->vbus_vsafe0v) {
 		reg |= TCPC_ALERT_EXTENDED_STATUS;
-		ret = regmap_write(tcpci->regmap, TCPC_EXTENDED_STATUS_MASK,
+		ret = Iregmap_write(tcpci->regmap, TCPC_EXTENDED_STATUS_MASK,
 				   TCPC_EXTENDED_STATUS_VSAFE0V);
 		if (ret < 0)
 			return ret;
 	}
+
 	return tcpci_write16(tcpci, TCPC_ALERT_MASK, reg);
 }
 
@@ -682,17 +722,19 @@ irqreturn_t tcpci_irq(struct tcpci *tcpci)
 	 * Clear alert status for everything except RX_STATUS, which shouldn't
 	 * be cleared until we have successfully retrieved message.
 	 */
-	if (status & ~TCPC_ALERT_RX_STATUS)
+	if (status & ~TCPC_ALERT_RX_STATUS) {
 		tcpci_write16(tcpci, TCPC_ALERT,
 			      status & ~TCPC_ALERT_RX_STATUS);
+	}
 
-	if (status & TCPC_ALERT_CC_STATUS)
+	if (status & TCPC_ALERT_CC_STATUS) {
 		tcpm_cc_change(tcpci->port);
+	}
 
 	if (status & TCPC_ALERT_POWER_STATUS) {
 		/* Read power status to clear the event */
-		regmap_read(tcpci->regmap, TCPC_POWER_STATUS, &raw);
-		regmap_read(tcpci->regmap, TCPC_POWER_STATUS_MASK, &raw);
+		Iregmap_read(tcpci->regmap, TCPC_POWER_STATUS, &raw);
+		Iregmap_read(tcpci->regmap, TCPC_POWER_STATUS_MASK, &raw);
 
 		/*
 		 * If power status mask has been reset, then the TCPC
@@ -704,15 +746,16 @@ irqreturn_t tcpci_irq(struct tcpci *tcpci)
 			tcpm_vbus_change(tcpci->port);
 	}
 
-	if (status & TCPC_ALERT_V_ALARM_LO)
+	if (status & TCPC_ALERT_V_ALARM_LO) {
 		tcpci_vbus_force_discharge(&tcpci->tcpc, false);
+	}
 
 	if (status & TCPC_ALERT_RX_STATUS) {
 		struct pd_message msg;
 		unsigned int cnt, payload_cnt;
 		u16 header;
 
-		regmap_read(tcpci->regmap, TCPC_RX_BYTE_CNT, &cnt);
+		Iregmap_read(tcpci->regmap, TCPC_RX_BYTE_CNT, &cnt);
 		/*
 		 * 'cnt' corresponds to READABLE_BYTE_COUNT in section 4.4.14
 		 * of the TCPCI spec [Rev 2.0 Ver 1.0 October 2017] and is
@@ -741,20 +784,21 @@ irqreturn_t tcpci_irq(struct tcpci *tcpci)
 	}
 
 	if (tcpci->data->vbus_vsafe0v && (status & TCPC_ALERT_EXTENDED_STATUS)) {
-		ret = regmap_read(tcpci->regmap, TCPC_EXTENDED_STATUS, &raw);
+		ret = Iregmap_read(tcpci->regmap, TCPC_EXTENDED_STATUS, &raw);
 		if (!ret && (raw & TCPC_EXTENDED_STATUS_VSAFE0V))
 			tcpm_vbus_change(tcpci->port);
 	}
 
 	/* Clear the fault status anyway */
 	if (status & TCPC_ALERT_FAULT) {
-		regmap_read(tcpci->regmap, TCPC_FAULT_STATUS, &raw);
-		regmap_write(tcpci->regmap, TCPC_FAULT_STATUS,
+		Iregmap_read(tcpci->regmap, TCPC_FAULT_STATUS, &raw);
+		Iregmap_write(tcpci->regmap, TCPC_FAULT_STATUS,
 				raw | TCPC_FAULT_STATUS_CLEAR);
 	}
 
-	if (status & TCPC_ALERT_RX_HARD_RST)
+	if (status & TCPC_ALERT_RX_HARD_RST) {
 		tcpm_pd_hard_reset(tcpci->port);
+	}
 
 	if (status & TCPC_ALERT_TX_SUCCESS)
 		tcpm_pd_transmit_complete(tcpci->port, TCPC_TX_SUCCESS);
@@ -807,6 +851,7 @@ struct tcpci *tcpci_register_port(struct device *dev, struct tcpci_data *data)
 	tcpci->dev = dev;
 	tcpci->data = data;
 	tcpci->regmap = data->regmap;
+	tcpci->drive_vbus = true;
 
 	tcpci->tcpc.init = tcpci_init;
 	tcpci->tcpc.get_vbus = tcpci_get_vbus;
diff --git a/drivers/usb/typec/tcpm/tcpm.c b/drivers/usb/typec/tcpm/tcpm.c
index 96bb7e72d376..40ce5dddc587 100644
--- a/drivers/usb/typec/tcpm/tcpm.c
+++ b/drivers/usb/typec/tcpm/tcpm.c
@@ -343,6 +343,7 @@ struct tcpm_port {
 	bool vbus_never_low;
 	bool vbus_source;
 	bool vbus_charge;
+	bool force_vbus_charge_on;
 
 	/* Set to true when Discover_Identity Command is expected to be sent in Ready states. */
 	bool send_discover;
@@ -941,6 +942,9 @@ static int tcpm_mux_set(struct tcpm_port *port, int state,
 	tcpm_log(port, "Requesting mux state %d, usb-role %d, orientation %d",
 		 state, usb_role, orientation);
 
+pr_warn("Requesting mux state %d, usb-role %d, orientation %d",
+		 state, usb_role, orientation);
+
 	ret = typec_set_orientation(port->typec_port, orientation);
 	if (ret)
 		return ret;
@@ -3561,6 +3565,8 @@ static int tcpm_set_vbus(struct tcpm_port *port, bool enable)
 {
 	int ret;
 
+pr_warn("tcpm_set_vbus enable %B charge %d", enable, port->vbus_charge);
+
 	if (enable && port->vbus_charge)
 		return -EINVAL;
 
@@ -3581,6 +3587,9 @@ static int tcpm_set_charge(struct tcpm_port *port, bool charge)
 	if (charge && port->vbus_source)
 		return -EINVAL;
 
+	if(!charge && port->force_vbus_charge_on)
+		return -EINVAL;
+
 	if (charge != port->vbus_charge) {
 		tcpm_log(port, "vbus=%d charge:=%d", port->vbus_source, charge);
 		ret = port->tcpc->set_vbus(port->tcpc, port->vbus_source,
@@ -3607,12 +3616,9 @@ static bool tcpm_start_toggling(struct tcpm_port *port, enum typec_cc_status cc)
 
 static int tcpm_init_vbus(struct tcpm_port *port)
 {
-	int ret;
+pr_warn("tcpm_init_vbus %d %d", port->vbus_source, port->vbus_charge);
 
-	ret = port->tcpc->set_vbus(port->tcpc, false, false);
-	port->vbus_source = false;
-	port->vbus_charge = false;
-	return ret;
+	return port->tcpc->set_vbus(port->tcpc, port->vbus_source, port->vbus_charge);
 }
 
 static int tcpm_init_vconn(struct tcpm_port *port)
@@ -3751,6 +3757,7 @@ static void tcpm_reset_port(struct tcpm_port *port)
 	port->pps_data.supported = false;
 	tcpm_set_partner_usb_comm_capable(port, false);
 
+
 	/*
 	 * First Rx ID should be 0; set this to a sentinel of -1 so that
 	 * we can check tcpm_pd_rx_handler() if we had seen it before.
@@ -3758,11 +3765,15 @@ static void tcpm_reset_port(struct tcpm_port *port)
 	port->rx_msgid = -1;
 
 	port->tcpc->set_pd_rx(port->tcpc, false);
+
 	tcpm_init_vbus(port);	/* also disables charging */
 	tcpm_init_vconn(port);
-	tcpm_set_current_limit(port, 0, 0);
+pr_warn("tcpm_reset_port - limit to 20V/1.5A");
+	tcpm_set_current_limit(port, 20000, 1500);
+#if 0
 	tcpm_set_polarity(port, TYPEC_POLARITY_CC1);
-	tcpm_mux_set(port, TYPEC_STATE_SAFE, USB_ROLE_NONE,
+pr_warn("tcpm_reset_port 6 - force host");
+	tcpm_mux_set(port, TYPEC_STATE_SAFE, USB_ROLE_HOST,
 		     TYPEC_ORIENTATION_NONE);
 	tcpm_set_attached_state(port, false);
 	port->try_src_count = 0;
@@ -3773,7 +3784,7 @@ static void tcpm_reset_port(struct tcpm_port *port)
 	port->sink_cap_done = false;
 	if (port->tcpc->enable_frs)
 		port->tcpc->enable_frs(port->tcpc, false);
-
+#endif
 	usb_power_delivery_unregister_capabilities(port->partner_sink_caps);
 	port->partner_sink_caps = NULL;
 	usb_power_delivery_unregister_capabilities(port->partner_source_caps);
@@ -4544,6 +4555,7 @@ static void run_state_machine(struct tcpm_port *port)
 		break;
 	case SRC_HARD_RESET_VBUS_ON:
 		tcpm_set_vconn(port, true);
+
 		tcpm_set_vbus(port, true);
 		if (port->ams == HARD_RESET)
 			tcpm_ams_finish(port);
@@ -4629,16 +4641,19 @@ static void run_state_machine(struct tcpm_port *port)
 		tcpm_ams_start(port, SOFT_RESET_AMS);
 		break;
 	case SOFT_RESET_SEND:
+pr_warn("run_state_machine: soft_reset_send - don't send control");
 		port->message_id = 0;
 		port->rx_msgid = -1;
 		/* remove existing capabilities */
 		usb_power_delivery_unregister_capabilities(port->partner_source_caps);
 		port->partner_source_caps = NULL;
+#if 0
 		if (tcpm_pd_send_control(port, PD_CTRL_SOFT_RESET))
 			tcpm_set_state_cond(port, hard_reset_state(port), 0);
 		else
 			tcpm_set_state_cond(port, hard_reset_state(port),
 					    PD_T_SENDER_RESPONSE);
+#endif
 		break;
 
 	/* DR_Swap states */
@@ -4729,6 +4744,7 @@ static void run_state_machine(struct tcpm_port *port)
 		 * Prevent vbus discharge circuit from turning on during PR_SWAP
 		 * as this is not a disconnect.
 		 */
+
 		tcpm_set_vbus(port, false);
 		port->explicit_contract = false;
 		/* allow time for Vbus discharge, must be < tSrcSwapStdby */
@@ -4779,6 +4795,7 @@ static void run_state_machine(struct tcpm_port *port)
 	case PR_SWAP_SNK_SRC_SOURCE_ON:
 		tcpm_enable_auto_vbus_discharge(port, true);
 		tcpm_set_cc(port, tcpm_rp_cc(port));
+
 		tcpm_set_vbus(port, true);
 		/*
 		 * allow time VBUS ramp-up, must be < tNewSrc
@@ -5178,6 +5195,8 @@ static void _tcpm_cc_change(struct tcpm_port *port, enum typec_cc_status cc1,
 
 static void _tcpm_pd_vbus_on(struct tcpm_port *port)
 {
+pr_warn("pd_vbus_on");
+
 	tcpm_log_force(port, "VBUS on");
 	port->vbus_present = true;
 	/*
@@ -5268,6 +5287,7 @@ static void _tcpm_pd_vbus_on(struct tcpm_port *port)
 
 static void _tcpm_pd_vbus_off(struct tcpm_port *port)
 {
+pr_warn("pd_vbus_off");
 	tcpm_log_force(port, "VBUS off");
 	port->vbus_present = false;
 	port->vbus_never_low = false;
@@ -5372,6 +5392,8 @@ static void _tcpm_pd_vbus_off(struct tcpm_port *port)
 
 static void _tcpm_pd_vbus_vsafe0v(struct tcpm_port *port)
 {
+pr_warn("pd_vbus_vsafe0v");
+
 	tcpm_log_force(port, "VBUS VSAFE0V");
 	port->vbus_vsafe0v = true;
 	switch (port->state) {
@@ -5421,6 +5443,7 @@ static void _tcpm_pd_vbus_vsafe0v(struct tcpm_port *port)
 
 static void _tcpm_pd_hard_reset(struct tcpm_port *port)
 {
+pr_warn("pd_hard_reset");
 	tcpm_log_force(port, "Received hard reset");
 	if (port->bist_request == BDO_MODE_TESTDATA && port->tcpc->set_bist_data)
 		port->tcpc->set_bist_data(port->tcpc, false);
@@ -5461,6 +5484,7 @@ static void tcpm_pd_event_handler(struct kthread_work *work)
 		events = port->pd_events;
 		port->pd_events = 0;
 		spin_unlock(&port->pd_event_lock);
+
 		if (events & TCPM_RESET_EVENT)
 			_tcpm_pd_hard_reset(port);
 		if (events & TCPM_VBUS_EVENT) {
@@ -5992,6 +6016,8 @@ static void tcpm_init(struct tcpm_port *port)
 
 	port->tcpc->init(port->tcpc);
 
+pr_warn("tcpm_init");
+
 	tcpm_reset_port(port);
 
 	/*
@@ -6166,6 +6192,22 @@ static int tcpm_fw_get_caps(struct tcpm_port *port,
 	port->pd_supported = !fwnode_property_read_bool(fwnode, "pd-disable");
 
 	port->slow_charger_loop = fwnode_property_read_bool(fwnode, "slow-charger-loop");
+
+ 	if (fwnode_property_present(fwnode, "init-vbus-source"))
+               port->vbus_source = true;
+        else
+               port->vbus_source = false;
+
+	if (fwnode_property_present(fwnode, "init-vbus-charge"))
+               port->vbus_charge = true;
+        else
+               port->vbus_charge = false;
+
+        if (fwnode_property_present(fwnode, "force-vbus-charge-on"))
+               port->force_vbus_charge_on = true;
+        else
+               port->force_vbus_charge_on = false;
+
 	if (port->port_type == TYPEC_PORT_SNK)
 		goto sink;
 

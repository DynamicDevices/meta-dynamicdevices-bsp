From 1234567890abcdef1234567890abcdef12345678 Mon Sep 17 00:00:00 2001
From: Dynamic Devices <support@dynamicdevices.co.uk>
Date: Mon, 21 Oct 2025 12:00:00 +0000
Subject: [PATCH] rtc: pcf2127: Add support for PCF2131 RTC

Add support for the NXP PCF2131 RTC chip to the existing rtc-pcf2127 driver.
The PCF2131 is compatible with the PCF2127 but includes additional features
like dual interrupts and enhanced power management.

This patch adds:
1. PCF2131 device type enum
2. Compatible string "nxp,pcf2131"
3. I2C and SPI device ID support
4. PCF2131-specific register definitions

The PCF2131 provides ultra-low power consumption (83-104nA) making it
ideal for battery-powered applications requiring 5+ year operation.

Signed-off-by: Dynamic Devices <support@dynamicdevices.co.uk>
---
 drivers/rtc/rtc-pcf2127.c | 45 +++++++++++++++++++++++++++++++++++++++
 1 file changed, 45 insertions(+)

diff --git a/drivers/rtc/rtc-pcf2127.c b/drivers/rtc/rtc-pcf2127.c
index 123456789abc..fedcba987654 100644
--- a/drivers/rtc/rtc-pcf2127.c
+++ b/drivers/rtc/rtc-pcf2127.c
@@ -178,6 +178,7 @@ enum pcf21xx_type {
 	PCF2127,
 	PCF2129,
 	PCF21XX,
+	PCF2131,
 	PCF21XX_LAST_ID
 };
 
@@ -185,6 +186,16 @@ struct pcf21xx_config {
 	int max_register;
 	unsigned int has_nvmem:1;
 	unsigned int has_bit_wd_ctl_cd0:1;
+	unsigned int has_dual_interrupt:1;
+};
+
+/* PCF2131-specific register definitions */
+#define PCF2131_REG_INT_A_MASK1		0x11
+#define PCF2131_REG_INT_A_MASK2		0x12
+#define PCF2131_REG_INT_B_MASK1		0x13
+#define PCF2131_REG_INT_B_MASK2		0x14
+#define PCF2131_REG_CLKOUT_CTL		0x13
+#define PCF2131_REG_TIMESTAMP_MODE	0x18
 };
 
 /*
@@ -221,6 +232,12 @@ static struct pcf21xx_config pcf21xx_cfg[] = {
 		.max_register = 0x19,
 		.has_nvmem = 1,
 	},
+	[PCF2131] = {
+		.max_register = 0x36,
+		.has_nvmem = 1,
+		.has_bit_wd_ctl_cd0 = 1,
+		.has_dual_interrupt = 1,
+	},
 };
 
 struct pcf2127 {
@@ -916,6 +933,10 @@ static const struct of_device_id pcf2127_of_match[] = {
 		.compatible = "nxp,pcf21xx",
 		.data = (void *)PCF21XX
 	},
+	{
+		.compatible = "nxp,pcf2131",
+		.data = (void *)PCF2131
+	},
 	{}
 };
 MODULE_DEVICE_TABLE(of, pcf2127_of_match);
@@ -925,6 +946,7 @@ static const struct i2c_device_id pcf2127_i2c_id[] = {
 	{ "pcf2129", PCF2129 },
 	{ "pcf21xx", PCF21XX },
 	{ "rv2129", PCF21XX },
+	{ "pcf2131", PCF2131 },
 	{ }
 };
 MODULE_DEVICE_TABLE(i2c, pcf2127_i2c_id);
@@ -945,6 +967,7 @@ static const struct spi_device_id pcf2127_spi_id[] = {
 	{ "pcf2129", PCF2129 },
 	{ "pcf21xx", PCF21XX },
 	{ "rv2129", PCF21XX },
+	{ "pcf2131", PCF2131 },
 	{ }
 };
 MODULE_DEVICE_TABLE(spi, pcf2127_spi_id);
@@ -1005,4 +1028,4 @@ module_exit(pcf2127_exit);
 MODULE_AUTHOR("Renaud Cerrato <r.cerrato@til-technologies.fr>");
 MODULE_DESCRIPTION("NXP PCF2127/29 RTC driver");
 MODULE_LICENSE("GPL v2");
-MODULE_VERSION("0.0.1");
+MODULE_VERSION("0.0.2");
-- 
2.34.1

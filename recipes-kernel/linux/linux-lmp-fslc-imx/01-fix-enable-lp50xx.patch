diff --git a/drivers/leds/leds-lp50xx.c b/drivers/leds/leds-lp50xx.c
index 28d6b39fa72d..39d1c754ffb1 100644
--- a/drivers/leds/leds-lp50xx.c
+++ b/drivers/leds/leds-lp50xx.c
@@ -361,6 +361,8 @@ static int lp50xx_set_banks(struct lp50xx *priv, u32 led_banks[])
 	led_config_lo = bank_enable_mask;
 	led_config_hi = bank_enable_mask >> 8;
 
+	dev_dbg(priv->dev, "lp50xx_set_banks: setting value 0x%X\n", led_config_lo);
+
 	ret = regmap_write(priv->regmap, LP50XX_LED_CFG0, led_config_lo);
 	if (ret)
 		return ret;
@@ -398,6 +400,8 @@ static int lp50xx_probe_leds(struct fwnode_handle *child, struct lp50xx *priv,
 	int led_number;
 	int ret;
 
+	dev_dbg(priv->dev, "lp50xx_probe_leds: num_leds: %d\n", num_leds);
+
 	if (num_leds > 1) {
 		if (num_leds > priv->chip_info->max_modules) {
 			dev_err(priv->dev, "reg property is invalid\n");
@@ -450,7 +454,9 @@ static int lp50xx_probe_dt(struct lp50xx *priv)
 	u32 color_id;
 	int i = 0;
 
-	priv->enable_gpio = devm_gpiod_get_optional(priv->dev, "enable", GPIOD_OUT_LOW);
+	dev_dbg(priv->dev, "lp50xx_probe_dt\n");
+
+	priv->enable_gpio = devm_gpiod_get_optional(priv->dev, "enable", GPIOD_OUT_HIGH);
 	if (IS_ERR(priv->enable_gpio))
 		return dev_err_probe(priv->dev, PTR_ERR(priv->enable_gpio),
 				     "Failed to get enable GPIO\n");
@@ -467,6 +473,8 @@ static int lp50xx_probe_dt(struct lp50xx *priv)
 			goto child_out;
 		}
 
+		dev_dbg(priv->dev, "- dealing with LED %d, reg count is %d\n", i, ret);
+
 		ret = lp50xx_probe_leds(child, priv, led, ret);
 		if (ret)
 			goto child_out;
@@ -494,6 +502,8 @@ static int lp50xx_probe_dt(struct lp50xx *priv)
 				goto child_out;
 			}
 
+			dev_dbg(priv->dev, "- dealing with colour index %d, value: %d\n", num_colors, color_id);
+
 			mc_led_info[num_colors].color_index = color_id;
 			num_colors++;
 		}
@@ -552,14 +562,15 @@ static int lp50xx_probe(struct i2c_client *client)
 		return ret;
 	}
 
-	ret = lp50xx_reset(led);
-	if (ret)
-		return ret;
-
 	ret = lp50xx_enable_disable(led, 1);
 	if (ret)
 		return ret;
 
+// Do not reset as we've just written the default register set and the enable bit
+//	ret = lp50xx_reset(led);
+//	if (ret)
+//		return ret;
+
 	return lp50xx_probe_dt(led);
 }
 
